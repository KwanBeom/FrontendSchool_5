브라우저가 html을 그리는 과정

1. 파싱
html 파일을 DOM으로 변환(파싱)
DOM :
오타 혹은 잘못된 문법을 사용했을 시 예외처리
<link>, <img>와 같은 태그를 만나면 리소스를 다운로드
<script> 태글르 만나면 DOM 파싱을 중단하고 자바스크립트를 해석합니다.

2. 스타일 계산
CSS 역시 파싱하여 CSSOM으로 변환
CSSOM 정보를 통해 DOM 노드에 대한 스타일을 적용

3.레이아웃
DOM, CSSOM 정보를 토대로 레이아웃 트리를 생성
DOM과 계산된 스타일ㅇ르 따라가며 요소의 크기나 좌표와 같은 정보를 담은 레이아웃 트리를 생성
화면에 표현되는 정보만 트리에 담기게 됨 display:none과 같은 정보는 담지 않음
position, left, top

4. 페인트
레이아웃 트리(렌더트리)가 생성되면 이 트리를 따라 페인트 기록이 생성됨
페인트 기록에는 요소를 렌더링하는 순서가 저장됨
color, background

5. 컴포지팅
각각의 레이어를 스크린에 픽셀로 표현하고(레스터링) 나누었던 레이어들을 합성하여 페이지를 그립니다. 이를 컴포지팅이라 합니다.

reflow vs repaint
브라우저는 html 구조상의 변화 혹은 스타일의 변화가 있을때 reflow, repaint 라는 과정을 거치게 됩니다.
브라우저의 각 단계별 렌더링 과정들은 반드시 전 단계의 데이터가 필요합니다.
때문에 만약 전 단계에 변화가 일어나면 다음 단계에 모두 영향을 미칩니다.

reflow
레이아웃(너비, 높이) 변경 시 영향 받는 모든 노드(자식,부모)의 수치를 다시 계산하여 렌더트리를 재성성하는 작업입니다.
렌더트리:  브라우저가 html을 분석하여 트리형태의 구조로 재해석한 것

repaint
reflow 과정이 끝난 후 재생성된 렌더 트리를 다시 그리는 작업
수치와 상관없는 스타일 변경시에는 reflow 과정을 생략한 repaint 작업만 수행합니다

만약 css를 통해 레이아웃이 바뀌는 애니메이션을 구현할 경우 브라우저는 매 프레임마다 reflow, repaint 과정을 수행해야합니다. 때문에 reflow, repaint 현상은 브라우저에 상당한 부담이 됩니다.

이때 브라우저의 부담을 덜기 위해서 GPU(graphic processing unit)를 이용한 그래픽 가속능력을 사용할 수 있는데 이러한 능력을 지원하는 css 속성이 바로 transform 입니다. 


결론 : 정적인 사이트에서 요소의 위치를 단순 배치하는것은 position을 사용해도 괜찮지만, 애니메이션이나 혹은 동적으로 요소의 위치를 이동해야 하는 경우 transform 속성을 사용하는 것이 성능에 좋습니다.

